geom_smooth(mapping = aes(x=year,y=Words),method="lm",se=F)+
labs(list(title = "Speech Length (in words, no outliers)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list$sentence=tapply(sentence.list$sent.id,sentence.list$year,length)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=sentence,color=Party))+
geom_smooth(aes(x=year,y=sentence),se=F,method="lm")+
labs(list(title = "Speech Length (in secences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list$word.count=tapply(sentence.list$word.count,sentence.list$year,mean)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=word.count,color=Party))+
geom_smooth(mapping = aes(x=year,y=word.count),se=F,method="lm")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
Demo=speech.list[speech.list$Party=="Democratic",]
Demo=Demo[!is.na(Demo$President),]
Repub=speech.list[speech.list$Party=="Republican",]
Repub=Repub[!is.na(Repub$President),]
Demo.Repub=rbind(Demo,Repub)
ggplot(data = Demo.Repub,mapping = aes(x=year,y=Words,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in words)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=sentence,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in sentences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=word.count,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "words in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
folder.path="../data/InauguralSpeeches/"
fulltext<-Corpus(DirSource(folder.path))
fulltext<-tm_map(fulltext, stripWhitespace)
fulltext<-tm_map(fulltext, content_transformer(tolower))
fulltext<-tm_map(fulltext, removeWords, stopwords("english"))
fulltext<-tm_map(fulltext, removeWords, character(0))
fulltext<-tm_map(fulltext, removePunctuation)
fulltext<-tm_map(fulltext, stemDocument)
fulltext<-tm_map(fulltext, removePunctuation)
fulltext<-tm_map(fulltext, removeNumbers)
fulltext<-tm_map(fulltext, PlainTextDocument)
dtm <- DocumentTermMatrix(fulltext)
dtms <- removeSparseTerms(dtm, 0.1)
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
ggplot(subset(wf, freq>200), aes(word, freq))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=45, hjust=1),plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
labs(list(title = "Words Frequency (more than 200 times) ", x = "Year", y = "words amount"))
nrow(subset(wf, freq>200))
wf[which.max(wf$freq),]
#people vs govern
for (i in 1:nrow(speech.list))
{
speech.list$people[i]=length(gregexpr("people",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
speech.list$govern[i]=length(gregexpr("govern",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
sublist=speech.list[,c("year","people","govern")]
sub=melt(sublist,id="year")
ggplot(data=sub)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
for (i in 1:nrow(speech.list))
{
speech.list$great[i]=length(gregexpr("great",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
ggplot(data=speech.list,aes(x=year,y=great))+
geom_bar(stat="identity")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list[which.max(speech.list$great),c("President","Date","great")]
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selectedData=melt(selectedData,id="year")
p=ggplot(data=selectedData)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
print(p)})
},
options = list(height = 600)
)
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selectedData=melt(selectedData,id="year")
p=ggplot(data=selectedData)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
print(p)})
},
options = list(height = 600)
)
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selectedData=melt(selectedData,id="year")
p=ggplot(data=selectedData)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
print(p)})
},
options = list(height = 600)
)
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selected=melt(selectedData,id="year")
p=ggplot(data=selected)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
print(p)})
},
options = list(height = 600)
)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr("peopl",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr("govern",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selected=melt(selectedData,id="year")
p=ggplot(data=selected)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
print(p)
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selected=melt(selectedData,id="year")
p=ggplot(data=selected)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
print(p)})
},
options = list(height = 600)
)
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selected=melt(selectedData,id="year")
ggplot(data=selected)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
})
},
options = list(height = 600)
)
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word2),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
server = function(input, output, session) {
library(shiny)
subwords=subset(wf, freq>300)
word=subwords$word
dtm <- DocumentTermMatrix(fulltext)
dtm=tidy(dtm)
selectedData=data.frame(year=rep(NA,58),word1=rep(NA,58),word2=rep(NA,58))
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('word1', 'Word 1',
word,selected=word[3])),
column(4, selectInput('word2', 'Word 2', word,
selected=word[4]))),
fluidRow(
plotOutput('barplot', height = "400px")
)
),
server = function(input, output, session) {
output$plot <- renderPlot( height = 400,{
for (i in 1:nrow(speech.list))
{
selectedData$year[i]=speech.list$year[i]
selectedData$word1[i]=length(gregexpr(as.character(input$word1),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
selectedData$word2[i]=length(gregexpr(as.character(input$word2),speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
selected=melt(selectedData,id="year")
ggplot(data=selected)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
})
},
options = list(height = 600)
)
packages.used=c("rvest", "xml2", "qdap","syuzhet", "ggplot2", "tm","tidytext","reshape2")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("xml2")
library("qdap")
library("syuzhet")
library("ggplot2")
library("tm")
library("tidytext")
library("reshape2")
source("../lib/speechFuncs.R")
print(R.version)
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#read in the csv data set
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
speech.list=cbind(inaug.list, inaug)
speech.list=speech.list[,-5]
#delete the date column due to formatting error
colnames(speech.list)[colnames(speech.list)=="links"]="Date"
#name the correct date
#abtract the year of the speech
speech.list$year = rep(NA,nrow(speech.list))
for ( i in 1:nrow(speech.list))
{  n = nchar(speech.list$Date[i])
speech.list$year[i] = as.numeric(substring(speech.list$Date[i],n-3,n))
}
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/InauguralSpeeches/",
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
sentence.list=NULL
for(i in 1:nrow(speech.list)){
sentences=sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0){
word.count=word_count(sentences)
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
sent.id=1:length(sentences)
)
)
}
}
sentence.list=sentence.list[!is.na(sentence.list$word.count),]
#delete lines of non-sentences.
#plot the speech length vs year
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=Words,color=Party))+
geom_smooth(mapping = aes(x=year,y=Words),method="lm",se=F)+
labs(list(title = "Speech Length (in words)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list[which.max(speech.list$Words),c("President","year","Words")]
speech.list[which.min(speech.list$Words),c("President","year","Words")]
speech.list.new=speech.list[-which.max(speech.list$Words),]
speech.list.new=speech.list.new[-which.min(speech.list.new$Words),]
#plot the speech length (without outliers) vs year
ggplot(data = speech.list.new)+
geom_point(mapping = aes(x=year,y=Words,color=Party))+
geom_smooth(mapping = aes(x=year,y=Words),method="lm",se=F)+
labs(list(title = "Speech Length (in words, no outliers)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list$sentence=tapply(sentence.list$sent.id,sentence.list$year,length)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=sentence,color=Party))+
geom_smooth(aes(x=year,y=sentence),se=F,method="lm")+
labs(list(title = "Speech Length (in secences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list$word.count=tapply(sentence.list$word.count,sentence.list$year,mean)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=word.count,color=Party))+
geom_smooth(mapping = aes(x=year,y=word.count),se=F,method="lm")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""), path="../figs/")
speech.list$word.count=tapply(sentence.list$word.count,sentence.list$year,mean)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=word.count,color=Party))+
geom_smooth(mapping = aes(x=year,y=word.count),se=F,method="lm")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
ggsave(plot=last_plot(), filename=paste(title,".jpeg", sep=""), path="../figs/")
speech.list$word.count=tapply(sentence.list$word.count,sentence.list$year,mean)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=word.count,color=Party))+
geom_smooth(mapping = aes(x=year,y=word.count),se=F,method="lm")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
ggsave(plot=last_plot(), filename=paste("Average Sentence Length",".jpeg", sep=""), path="../figs/")
speech.list$word.count=tapply(sentence.list$word.count,sentence.list$year,mean)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=word.count,color=Party))+
geom_smooth(mapping = aes(x=year,y=word.count),se=F,method="lm")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
ggsave(plot=last_plot(), filename=paste("Average Sentence Length",".jpeg", sep=""), path="../figs/",width=10)
Demo=speech.list[speech.list$Party=="Democratic",]
Demo=Demo[!is.na(Demo$President),]
Repub=speech.list[speech.list$Party=="Republican",]
Repub=Repub[!is.na(Repub$President),]
Demo.Repub=rbind(Demo,Repub)
ggplot(data = Demo.Repub,mapping = aes(x=year,y=Words,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in words)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
ggsave(plot=last_plot(), filename=paste("Speech Length by party",".jpeg", sep=""), path="../figs/",width=10)
ggplot(data = Demo.Repub,mapping = aes(x=year,y=sentence,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in sentences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=word.count,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "words in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
for (i in 1:nrow(speech.list))
{
speech.list$great[i]=length(gregexpr("great",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
ggplot(data=speech.list,aes(x=year,y=great))+
geom_bar(stat="identity")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
ggsave(plot=last_plot(), filename=paste("Words Frequency (great) ",".jpeg", sep=""), path="../figs/",width=10)
speech.list[which.max(speech.list$great),c("President","Date","great")]
